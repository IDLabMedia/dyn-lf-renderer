//
// Created by brent on 3/9/25.
//

#ifndef VOXEL_DECOMPRESSOR_H
#define VOXEL_DECOMPRESSOR_H

#include "decompressor.h"
#include "input/buffered_loader.h"
#include "shaders/compute/compute_shader.h"
#include "gpu_wrappers/atomic_counter.h"
#include "gpu_wrappers/ssbo.h"
#include <cstddef>

class VclDecompressor: public Decompressor {
private:
  const size_t _bufferedFrames;
  /* Buffered load the raw vcl data to CPU*/
  BufferedLoader<glm::float32> _voxelBuffer;

  /* The voxel cloud GPU buffer. This buffer will be loaded to the vbo */
  SSBO<glm::float32> _vcl;

  /* Compute shader to compute the faces using the marching cubes algorithm*/
  ComputeShader _hullCubes;

  float _gridSpacing;

  /* The faces generated by the marching cubes GPU buffer.
   * This buffer will be loaded to the ebo
   */
  SSBO<glm::uint32> _faces;
  AtomicCounter _faceCounter;

  /**
   * Load the frame data to the vcl SSBO.
   * @param frame The frame to load the data to the vcl SSBO for.
   * @return The size of the loaded buffer.
   */
  size_t loadVcl(size_t frame);

  std::string voxelPath(size_t frame) const;

public:
  explicit VclDecompressor(std::string inDir, size_t totalFrames, float gridSpacing, size_t bufferedFrames = 5);
  ~VclDecompressor() override = default;
  void decompress(size_t frame, std::unique_ptr<MeshLoader>& mesh, std::unique_ptr<TexturesLoader>& texture) override;
};

#endif //VOXEL_DECOMPRESSOR_H
