//
// Created by brent on 11/19/24.
//

#ifndef SHADER_PROGRAM_CPP_H
#define SHADER_PROGRAM_CPP_H

#include <glad/glad.h>
#include <glm.hpp>

#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

class ShaderInfo {
public:
    unsigned int shaderType;
    std::string shaderPath;

    /**
     * Info about the shader to create.
     * @param shaderType Type of the shader, as generated by glCreateShader
     * @param shaderPath Path to the shader file
     */
    ShaderInfo(unsigned int shaderType, std::string shaderPath): shaderType(shaderType), shaderPath(std::move(shaderPath)) {}
};

class ShaderProgram {
private:
    unsigned int _program_id;
    mutable std::unordered_map<std::string, GLint> uniformLocationMap;
	const std::string _cmakelistsDir = CMAKELISTS_SOURCE_DIR;

    // Start shader creation //

    /**
     * Fetch the shadercode from file.
     * @param shaderPath The path to the shader file.
     * @return The shader code as string.
     */
    std::string fetchShaderSrc(const char* shaderPath) const;

    /**
     * Compile the shader
     * @param shaderCode The shader code as string
     * @param shaderType The type of shader. Generated by `glCreateShader(type)`
     */
    bool compileShader(const std::string& shaderCode, unsigned int shaderType) const;

    /**
     * Create a specified shader.
     * @param shaderInfo The info to create a shader with.
     */
    void createShader(const ShaderInfo& shaderInfo) const;

    // End shader creation //

    GLint getUniformLocation(const std::string& name) const;
protected:
	std::string getShadersDir() const;
public:
    /**
     * Create a program with the given shaders
     * @param shaders The shaders to use in the program
     */
    explicit ShaderProgram(const std::vector<ShaderInfo>& shaders);

	void use() const;

	void setBool(const std::string& name, bool value) const;

	void setInt(const std::string& name, int value) const;

	void setFloat(const std::string& name, float value) const;

	void setVec2(const std::string& name, const glm::vec2& value) const;

	void setVec2(const std::string& name, float x, float y) const;

	void setVec3(const std::string& name, const glm::vec3& value) const;

	void setVec3(const std::string& name, float x, float y, float z) const;

	void setVec4(const std::string& name, const glm::vec4& value) const;

	void setVec4(const std::string& name, float x, float y, float z, float w) const;

	void setMat2(const std::string& name, const glm::mat2& mat) const;

	void setMat3(const std::string& name, const glm::mat3& mat) const;

	void setMat4(const std::string& name, const glm::mat4& mat) const;

  void setIntArray(const std::string& name, const std::vector<int>& ints) const;

	void setVec2Array(const std::string& name, const std::vector<glm::vec2>& vecs) const;

	void setVec3Array(const std::string& name, const std::vector<glm::vec3>& vecs) const;

	void setMat4Array(const std::string& name, const std::vector<glm::mat4>& mats) const;

};

#endif //SHADER_PROGRAM_CPP_H
